/*!
 * Accessible Listbox v1.0.0 
 * Copyright 2015 Eureka2, Jacques Archim√®de.
 * Based on the example of the Open AJAX Alliance Accessibility Tools Task Force : http://oaa-accessibility.org/example/9/
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

 (function(factory){
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof exports === 'object') {
        factory(require('jquery'));
    } else {
		if (typeof jQuery === 'undefined') {
			throw new Error('Listbox\'s JavaScript requires jQuery')
		}
        factory(jQuery);
    }
}(function ($) {
	'use strict';

	var listboxContainer = [
		'<div class="listbox form-group" tabindex="0">',
		'	<div id="combobox-COMBOBOXID" class="input-group" role="combobox">',
		'		<div id="listbox-edit-COMBOBOXID" class="form-control" aria-autocomplete="none" aria-readonly="true" tabindex="-1">',
		'			<span class="listbox-edit" aria-live="assertive"> </span>',
		'		</div>',
		'		<a class="listbox-button input-group-addon" role="button" aria-haspopup="true" aria-controls="listbox-items-COMBOBOXID" tabindex="-1">',
		'			<span class="glyphicon glyphicon-menu-down" title="Ouvrir ou fermer la liste"></span>',
		'		</a>',
		'	</div>',
		'	<ul class="listbox-items" id="listbox-items-COMBOBOXID" tabindex="-1" aria-expanded="true" role="listbox">',
		'	</ul>',
		'	<input class="listbox-input" type="text" id="COMBOBOXID" name="" value="" aria-hidden="true" />',
		'</div>'
	];
	//
	// keyCodes() is an object to contain keycodes needed for the application
	//
	function keyCodes() {
		// Define values for keycodes
		this.backspace  = 8;
		this.tab        = 9;
		this.enter      = 13;
		this.esc        = 27;

		this.space      = 32;
		this.pageup     = 33;
		this.pagedown   = 34;
		this.end        = 35;
		this.home       = 36;

		this.up         = 38;
		this.down       = 40; 

		this.del        = 46;

	} // end keyCodes

	/** 
	 *	Function Listbox() is a class for an ARIA-enabled listbox widget
	 *
	 *	@param (target string) target is the HTML select.
	 *
	 *	@param (options array) array of options.
	 *
	 *	@return N/A
	 *
	 */
	function Listbox(target, options) {
		var self = this;
		var $target = $(target);  // The jQuery object of the select containing the listbox
		this.options = $.extend({}, Listbox.DEFAULTS, options)
		this.id = $target.attr('id') || 'listbox-' + Math.floor(Math.random() * 100000);
		this.size = $target.attr('size') || this.options.size;
		var listbox = listboxContainer.join("");
		listbox = listbox.replace(/COMBOBOXID/g, this.id + '');
		this.$listbox = $(listbox);
		$.each( $target[0].attributes, function( i, attr ) {
			if ($.inArray(attr.name, ["id", "name", "class", "style", "value", "tabindex", "required", "aria-controls"]) < 0) {
				self.$listbox.attr(attr.name, attr.value);
			}
        }); 
		this.$listbox.css('position', 'relative');
		this.hideObject(this.$listbox.find('input'));
		this.$label = $target.parents().find("label[for=" + this.id + "]");
		this.$label.attr('for', 'combobox-' + this.id)
		if (! this.$listbox.attr('aria-label') && this.$label.length && this.$label.attr('id')) {
			this.$listbox.attr('aria-labelledby', this.$label.attr('id')); 
		}
		if ($target.attr('required')) {
			this.$listbox.attr('aria-required', true); 
		}
		this.$listbox.attr('aria-controls', this.id); 
		this.$listbox.attr('aria-label', $target.attr('aria-label'));
		this.$listbox.addClass(this.options.theme);
		this.keys = new keyCodes();

		// Store jQuery objects for the elements of the listbox
		this.$edit = this.$listbox.find('.listbox-edit');  // The jQuery object of the edit box
		this.$button = this.$listbox.find('.listbox-button');  // The jQuery object of the button
		this.$list = this.$listbox.find('.listbox-items');  // The jQuery object of the option list
		var $options = $target.find('option');
		var hasSelected  = false;
		$target.children().each(function(index) {
			if (this.tagName == 'OPTGROUP') {
				var $li = $('<li class="listbox-itemgroup" tabindex="-1">' + $(this).attr('label') + '</li>');
				self.$list.append($li);
				$li.attr('id', 'itemgroup' + self.id + '-' + self.$list.children().length);
				$li.css('width', $(this).css('width'));
				$(this).find('option').each(function(index) {
					hasSelected = self.populateList($(this), true) || hasSelected;
				});
			} else {
				hasSelected = self.populateList($(this), false) || hasSelected;
			}
		});
		this.$items = this.$list.find('li.listbox-item');  // An array of jQuery objects for the listbox options
		if (!hasSelected) {
			this.$items.eq(0).addClass('selected');
			this.$items.eq(0).attr('aria-selected', true);
		}
		this.$group = this.$listbox.find('.input-group');
		this.$input = this.$listbox.find('input');
		this.$input.attr('name', $target.attr('name'));
		if ($target.parent('.input-group').length == 0) {
			$target.replaceWith(this.$listbox);
		} else {
			var $inputGroup = $target.parent('.input-group').eq(0);
			if ($inputGroup.parent('.form-group').length > 0) {
				this.$listbox.removeClass('form-group');
			}
			$inputGroup.replaceWith(this.$listbox);
		}
		this.$input.data('alb.listbox', this);
		// if (this.$items.length > this.size) {
			// this.$list.height(this.$items.eq(0).outerHeight(true) * this.size);
			// this.$list.css('overflow-y', 'scroll');
		// }
		// $( window ).resize(function() {
			// self.$list.width(self.$group.outerWidth());
		// });
		this.$initial; // the initial value of the listbox
		this.$selected; // the current value of the listbox
		this.$focused; // the currently selected option in the combo list
		this.timer = null; // stores the close list timer that is set when combo looses focus

		this.timer = null;
		this.keybuff = [];

		// Initalize the listbox
		this.init();

		// bind event handlers for the widget
		this.bindHandlers();

	} // end Listbox constructor


	Listbox.VERSION  = '1.0.0'

	Listbox.DEFAULTS = {
		size: 10,
		theme: 'default',
		onSelected: function (value, text) {
			
		}
	}

	/** 
	 *	Function init() is a member function to initialize the listbox elements. Hides the list
	 *	and sets ARIA attributes
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.init = function() {

		// Hide the list of options
		this.hideObject(this.$list);
		this.$list.attr('aria-expanded', 'false');
		// Set initial value for the edit box
		this.$selected = this.$initial = this.$items.filter('.selected');
		this.$list.attr('aria-activedescendant', this.$selected.attr('id'));
		if (this.$selected.length > 0) {
			this.$edit.text(this.$selected.text());
			this.$input.attr('value', this.$selected.attr('data-value'));
			this.$input.trigger('change');
		}

	} // end init()

	/** 
	 *	Function populateList() is a member function to populate the listbox items form the select box. 
	 *	@return true if the item is selected, false otherwise 
	 *
	 */
	Listbox.prototype.populateList = function($option, nested) {
		var self = this;
		var selected  = false;
		var value = $option.is('[value]') ? $option.attr('value') : $option.text();
		var nestedClass = nested ? " listbox-item-nested" : "";
		var $li = $('<li role="option" class="listbox-item' + nestedClass + '" tabindex="-1" data-value="' + value + '">' + $option.text() + '</li>');
		if ($option.attr('selected')) {
			$li.addClass('selected');
			$li.attr('aria-selected', true);
			selected  = true;
		}
		self.$list.append($li);
		$li.attr('id', 'item' + self.id + '-' + self.$list.children().length);
		$li.css('width', $option.css('width'));
		return selected;
	} // end populateList()

	/** 
	 *	bindEditboxHandlers() is a member function to bind event handlers for the edit box 
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.bindEditboxHandlers = function() {
		var self = this;
		this.$listbox.keydown(function(e) {
			return self.handleEditKeyDown($(this), e);
		});
		this.$listbox.keypress(function(e) {
			return self.handleEditKeyPress($(this), e);
		});
		this.$listbox.blur(function(e) {
			self.$edit.css('outline', 0);
			return self.handleListBlur($(this), e);
		});
		this.$listbox.focus(function(e) {
			self.$edit.css('outline', 'thin dotted');
			return false;
		});
		$("label[for=combobox-"+this.id+"]").click(function (e) {
			self.$listbox.focus();
		});
	} // end bindEditboxHandlers()

	/** 
	 *	bindButtonHandlers() is a member function to bind event handlers for the edit box 
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.bindButtonHandlers = function() {
		var self = this;
		this.$group.click(function(e) {
			return self.handleButtonClick($(this), e);
		});
		this.$group.mouseover(function(e) {
			return self.handleButtonMouseOver($(this), e);
		});
		this.$group.mouseout(function(e) {
			return self.handleButtonMouseOut($(this), e);
		});
		this.$group.mousedown(function(e) {
			return self.handleButtonMouseDown($(this), e);
		});
		this.$group.mouseup(function(e) {
			return self.handleButtonMouseUp($(this), e);
		});
	} // end bindButtonHandlers()

	/** 
	 *	bindListboxHandlers() is a member function to bind event handlers for the listbox itself
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.bindListboxHandlers = function() {
		var self = this;
		this.$list.focus(function(e) {
			return self.handleListFocus($(this), e);
		});
		this.$list.blur(function(e) {
			return self.handleListBlur($(this), e);
		});
	} // end bindListboxHandlers()

	/** 
	 *	bindOptionsHandlers() is a member function to bind event handlers for the list option
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.bindOptionsHandlers = function() {
		var self = this;
		this.$items.keydown(function(e) {
			return self.handleOptionKeyDown($(this), e);
		});
		this.$items.keypress(function(e) {
			return self.handleOptionKeyPress($(this), e);
		});
		this.$items.click(function(e) {
			return self.handleOptionClick($(this), e);
		});
		this.$items.focus(function(e) {
			return self.handleListFocus($(this), e);
		});
		this.$items.blur(function(e) {
			return self.handleListBlur($(this), e);
		});
	} // end bindOptionsHandlers()



	/** 
	 *	bindHandlers() is a member function to bind event handlers for the button
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.bindHandlers = function() {
		///////////////// bind editbox handlers /////////////////////////
		this.bindEditboxHandlers();

		///////////////// bind handlers for the button /////////////////////////
		this.bindButtonHandlers();

		///////////////// bind listbox handlers /////////////////////////
		this.bindListboxHandlers();

		///////////////// bind list option handlers /////////////////////////
		this.bindOptionsHandlers();
	} // end bindHandlers()

	/** 
	 *	isOpen() is a member function to get the current state of the list box
	 *
	 *	@return (boolean) returns true if list box is open; false if it is not
	 *
	 */
	Listbox.prototype.isOpen = function() {
		if (this.$list.attr('aria-expanded') == 'true') {
			return true;
		}
		else {
			return false;
		}
	} // end isOpen

	/** 
	 *	closeList() is a member function to close the list box if it is open
	 *
	 *	@param (restore booleam) restore is true if function should restore higlight to stored list selection
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.closeList = function(restore) {
		var $curOption = this.$items.filter('.selected');
		if (restore == true) {
			$curOption = this.$selected;

			// remove the selected class from the other list items
			this.$items.removeClass('selected');
			this.$items.removeAttr('aria-selected');

			// add selected class to the stored selection
			$curOption.addClass('selected');
			$curOption.attr('aria-selected', true);
		}
		this.$list.fadeOut().attr('aria-expanded', 'false');

		// set focus on the listbox box
		this.$listbox.focus();

	} // end closeList()

	/** 
	 *	openList() is a member function to open the list box if it is closed
	 *
	 *	@param (restore booleam) restore is true if function should restore higlight to stored list selection
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.openList = function(restore) {
		var $curOption = this.$items.filter('.selected');
		if (restore == true) {
			if (this.$selected.length == 0) {
				// select the first item
				this.selectOption(this.$items.first());
			}
			$curOption = this.$selected;
			// remove the selected class from the other list items
			this.$items.removeClass('selected');
			this.$items.removeAttr('aria-selected');
			// add selected class to the stored selection
			$curOption.addClass('selected');
			$curOption.attr('aria-selected', true);
		}

		// adjust the width of the list of items
		if (parseInt(this.$items.css('width'), 10) > parseInt(this.$group.css('width'), 10)) {
			this.$list.css('width', this.$items.css('width'));
		} else {
			this.$list.css('width', this.$group.css('width'));
			this.$items.css('width', this.$group.css('width'));
		}

		// adjust position of the list of items
		var listHeight = this.$list.outerHeight();
		var groupTop = this.$group.offset().top;
		var groupHeight = this.$group.outerHeight(true);
		var roomBefore = Math.floor(groupTop - $(window).scrollTop());
		var roomAfter = Math.floor($(window).height() - (groupTop + groupHeight - $(window).scrollTop()));
		if (roomAfter < listHeight && roomAfter < roomBefore) {
			this.$list.css('top', (- listHeight) + 'px'); // show list above group
		} else {
			this.$list.css('top', (groupHeight) + 'px');  // show list below group
		}
		this.$list.fadeIn().attr('aria-expanded', 'true');

		// scroll to the currently selected option
		this.$list.scrollTop(this.calcOffset($curOption));

		// set focus on the selected item
		this.$selected.focus();

	} // end openList();

	/** 
	 *	toggleList() is a member function to toggle the display of the listbox options.
	 *
	 *	@param (restore booleam) restore is true if toggle should restore higlight to stored list selection
	 *
	 *	Return N/A
	 *
	 */
	Listbox.prototype.toggleList = function(restore) {
		if (this.isOpen() == true) {
			this.closeList(restore);
		}
		else {
			this.openList(restore);
		}
	} // end toggleList()

	/** 
	 *	selectOption() is a member function to select a new listbox option.
	 *	The jQuery object for the new option is stored and the selected class is added
	 *
	 *	@param ($id object) $id is the jQuery object of the new option to select
	 *
	 *	@return N/A
	 *
	 */
	Listbox.prototype.selectOption = function($id) {
		// If there is a selected option, remove the selected class from it
		if (this.$selected.length > 0) {
			this.$selected.removeClass('selected');
			this.$selected.removeAttr('aria-selected');
		}

		// add the selected class to the new option
		$id.addClass('selected');
		$id.attr('aria-selected', true);

		// store the newly selected option
		this.$selected = $id;
		this.$list.attr('aria-activedescendant', this.$selected.attr('id'));

		// update the edit box
		this.$edit.text($id.text());
		this.$input.attr('value', $id.attr('data-value'));
		this.$input.trigger('change');
		this.options.onSelected($id.attr('data-value'), $id.text());
	} // end selectOption

	/** 
	 *	searchOption() is a member function to search the option whose text starts with the given keys.
	 *
	 *	@param (fromOption int) fromOption is the starting option 
	 *
	 *	@return The jQuery object for the matched option or null
	 *
	 */
	Listbox.prototype.searchOption = function(fromOption) {
		var search = this.keybuff.join("");
		this.keybuff = [];
		var $found = null;
		if (search !== "") {
			for (var i = fromOption + 1; i < this.$items.length; i++) {
				var $next = this.$items.eq(i);
				if (this.latinise($next.text()).toLocaleLowerCase().lastIndexOf(search, 0) === 0) {
					$found = $next;
					break;
				}
			}
			if ($found == null) {
				for (var i = 0; i < fromOption; i++) {
					var $next = this.$items.eq(i);
					if (this.latinise($next.text()).toLocaleLowerCase().lastIndexOf(search, 0) === 0) {
						$found = $next;
						break;
					}
				}
			}
		}
		return $found;
	} // end searchOption

	/** 
	 *	latinise() is a member function to replace all accented characters in a string.
	 *
	 *	@param (txt string) accented string
	 *
	 *	@return The unaccented string
	 *
	 */
	Listbox.prototype.latinise = function(txt) {
		var latin_map={"√Å":"A","ƒÇ":"A","·∫Æ":"A","·∫∂":"A","·∫∞":"A","·∫≤":"A","·∫¥":"A","«ç":"A","√Ç":"A","·∫§":"A","·∫¨":"A","·∫¶":"A","·∫®":"A","·∫™":"A","√Ñ":"A","«û":"A","»¶":"A","«†":"A","·∫†":"A","»Ä":"A","√Ä":"A","·∫¢":"A","»Ç":"A","ƒÄ":"A","ƒÑ":"A","√Ö":"A","«∫":"A","·∏Ä":"A","»∫":"A","√É":"A","Íú≤":"AA","√Ü":"AE","«º":"AE","«¢":"AE","Íú¥":"AO","Íú∂":"AU","Íú∏":"AV","Íú∫":"AV","Íúº":"AY","·∏Ç":"B","·∏Ñ":"B","∆Å":"B","·∏Ü":"B","…É":"B","∆Ç":"B","ƒÜ":"C","ƒå":"C","√á":"C","·∏à":"C","ƒà":"C","ƒä":"C","∆á":"C","»ª":"C","ƒé":"D","·∏ê":"D","·∏í":"D","·∏ä":"D","·∏å":"D","∆ä":"D","·∏é":"D","«≤":"D","«Ö":"D","ƒê":"D","∆ã":"D","«±":"DZ","«Ñ":"DZ","√â":"E","ƒî":"E","ƒö":"E","»®":"E","·∏ú":"E","√ä":"E","·∫æ":"E","·ªÜ":"E","·ªÄ":"E","·ªÇ":"E","·ªÑ":"E","·∏ò":"E","√ã":"E","ƒñ":"E","·∫∏":"E","»Ñ":"E","√à":"E","·∫∫":"E","»Ü":"E","ƒí":"E","·∏ñ":"E","·∏î":"E","ƒò":"E","…Ü":"E","·∫º":"E","·∏ö":"E","Íù™":"ET","·∏û":"F","∆ë":"F","«¥":"G","ƒû":"G","«¶":"G","ƒ¢":"G","ƒú":"G","ƒ†":"G","∆ì":"G","·∏†":"G","«§":"G","·∏™":"H","»û":"H","·∏®":"H","ƒ§":"H","‚±ß":"H","·∏¶":"H","·∏¢":"H","·∏§":"H","ƒ¶":"H","√ç":"I","ƒ¨":"I","«è":"I","√é":"I","√è":"I","·∏Æ":"I","ƒ∞":"I","·ªä":"I","»à":"I","√å":"I","·ªà":"I","»ä":"I","ƒ™":"I","ƒÆ":"I","∆ó":"I","ƒ®":"I","·∏¨":"I","Íùπ":"D","Íùª":"F","ÍùΩ":"G","ÍûÇ":"R","ÍûÑ":"S","ÍûÜ":"T","Íù¨":"IS","ƒ¥":"J","…à":"J","·∏∞":"K","«®":"K","ƒ∂":"K","‚±©":"K","ÍùÇ":"K","·∏≤":"K","∆ò":"K","·∏¥":"K","ÍùÄ":"K","ÍùÑ":"K","ƒπ":"L","»Ω":"L","ƒΩ":"L","ƒª":"L","·∏º":"L","·∏∂":"L","·∏∏":"L","‚±†":"L","Íùà":"L","·∏∫":"L","ƒø":"L","‚±¢":"L","«à":"L","≈Å":"L","«á":"LJ","·∏æ":"M","·πÄ":"M","·πÇ":"M","‚±Æ":"M","≈É":"N","≈á":"N","≈Ö":"N","·πä":"N","·πÑ":"N","·πÜ":"N","«∏":"N","∆ù":"N","·πà":"N","»†":"N","«ã":"N","√ë":"N","«ä":"NJ","√ì":"O","≈é":"O","«ë":"O","√î":"O","·ªê":"O","·ªò":"O","·ªí":"O","·ªî":"O","·ªñ":"O","√ñ":"O","»™":"O","»Æ":"O","»∞":"O","·ªå":"O","≈ê":"O","»å":"O","√í":"O","·ªé":"O","∆†":"O","·ªö":"O","·ª¢":"O","·ªú":"O","·ªû":"O","·ª†":"O","»é":"O","Íùä":"O","Íùå":"O","≈å":"O","·πí":"O","·πê":"O","∆ü":"O","«™":"O","«¨":"O","√ò":"O","«æ":"O","√ï":"O","·πå":"O","·πé":"O","»¨":"O","∆¢":"OI","Íùé":"OO","∆ê":"E","∆Ü":"O","»¢":"OU","·πî":"P","·πñ":"P","Íùí":"P","∆§":"P","Íùî":"P","‚±£":"P","Íùê":"P","Íùò":"Q","Íùñ":"Q","≈î":"R","≈ò":"R","≈ñ":"R","·πò":"R","·πö":"R","·πú":"R","»ê":"R","»í":"R","·πû":"R","…å":"R","‚±§":"R","Íúæ":"C","∆é":"E","≈ö":"S","·π§":"S","≈†":"S","·π¶":"S","≈û":"S","≈ú":"S","»ò":"S","·π†":"S","·π¢":"S","·π®":"S","≈§":"T","≈¢":"T","·π∞":"T","»ö":"T","»æ":"T","·π™":"T","·π¨":"T","∆¨":"T","·πÆ":"T","∆Æ":"T","≈¶":"T","‚±Ø":"A","ÍûÄ":"L","∆ú":"M","…Ö":"V","Íú®":"TZ","√ö":"U","≈¨":"U","«ì":"U","√õ":"U","·π∂":"U","√ú":"U","«ó":"U","«ô":"U","«õ":"U","«ï":"U","·π≤":"U","·ª§":"U","≈∞":"U","»î":"U","√ô":"U","·ª¶":"U","∆Ø":"U","·ª®":"U","·ª∞":"U","·ª™":"U","·ª¨":"U","·ªÆ":"U","»ñ":"U","≈™":"U","·π∫":"U","≈≤":"U","≈Æ":"U","≈®":"U","·π∏":"U","·π¥":"U","Íùû":"V","·πæ":"V","∆≤":"V","·πº":"V","Íù†":"VY","·∫Ç":"W","≈¥":"W","·∫Ñ":"W","·∫Ü":"W","·∫à":"W","·∫Ä":"W","‚±≤":"W","·∫å":"X","·∫ä":"X","√ù":"Y","≈∂":"Y","≈∏":"Y","·∫é":"Y","·ª¥":"Y","·ª≤":"Y","∆≥":"Y","·ª∂":"Y","·ªæ":"Y","»≤":"Y","…é":"Y","·ª∏":"Y","≈π":"Z","≈Ω":"Z","·∫ê":"Z","‚±´":"Z","≈ª":"Z","·∫í":"Z","»§":"Z","·∫î":"Z","∆µ":"Z","ƒ≤":"IJ","≈í":"OE","·¥Ä":"A","·¥Å":"AE"," ô":"B","·¥É":"B","·¥Ñ":"C","·¥Ö":"D","·¥á":"E","Íú∞":"F","…¢":"G"," õ":"G"," ú":"H","…™":"I"," Å":"R","·¥ä":"J","·¥ã":"K"," ü":"L","·¥å":"L","·¥ç":"M","…¥":"N","·¥è":"O","…∂":"OE","·¥ê":"O","·¥ï":"OU","·¥ò":"P"," Ä":"R","·¥é":"N","·¥ô":"R","Íú±":"S","·¥õ":"T","‚±ª":"E","·¥ö":"R","·¥ú":"U","·¥†":"V","·¥°":"W"," è":"Y","·¥¢":"Z","√°":"a","ƒÉ":"a","·∫Ø":"a","·∫∑":"a","·∫±":"a","·∫≥":"a","·∫µ":"a","«é":"a","√¢":"a","·∫•":"a","·∫≠":"a","·∫ß":"a","·∫©":"a","·∫´":"a","√§":"a","«ü":"a","»ß":"a","«°":"a","·∫°":"a","»Å":"a","√†":"a","·∫£":"a","»É":"a","ƒÅ":"a","ƒÖ":"a","·∂è":"a","·∫ö":"a","√•":"a","«ª":"a","·∏Å":"a","‚±•":"a","√£":"a","Íú≥":"aa","√¶":"ae","«Ω":"ae","«£":"ae","Íúµ":"ao","Íú∑":"au","Íúπ":"av","Íúª":"av","ÍúΩ":"ay","·∏É":"b","·∏Ö":"b","…ì":"b","·∏á":"b","·µ¨":"b","·∂Ä":"b","∆Ä":"b","∆É":"b","…µ":"o","ƒá":"c","ƒç":"c","√ß":"c","·∏â":"c","ƒâ":"c","…ï":"c","ƒã":"c","∆à":"c","»º":"c","ƒè":"d","·∏ë":"d","·∏ì":"d","»°":"d","·∏ã":"d","·∏ç":"d","…ó":"d","·∂ë":"d","·∏è":"d","·µ≠":"d","·∂Å":"d","ƒë":"d","…ñ":"d","∆å":"d","ƒ±":"i","»∑":"j","…ü":"j"," Ñ":"j","«≥":"dz","«Ü":"dz","√©":"e","ƒï":"e","ƒõ":"e","»©":"e","·∏ù":"e","√™":"e","·∫ø":"e","·ªá":"e","·ªÅ":"e","·ªÉ":"e","·ªÖ":"e","·∏ô":"e","√´":"e","ƒó":"e","·∫π":"e","»Ö":"e","√®":"e","·∫ª":"e","»á":"e","ƒì":"e","·∏ó":"e","·∏ï":"e","‚±∏":"e","ƒô":"e","·∂í":"e","…á":"e","·∫Ω":"e","·∏õ":"e","Íù´":"et","·∏ü":"f","∆í":"f","·µÆ":"f","·∂Ç":"f","«µ":"g","ƒü":"g","«ß":"g","ƒ£":"g","ƒù":"g","ƒ°":"g","…†":"g","·∏°":"g","·∂É":"g","«•":"g","·∏´":"h","»ü":"h","·∏©":"h","ƒ•":"h","‚±®":"h","·∏ß":"h","·∏£":"h","·∏•":"h","…¶":"h","·∫ñ":"h","ƒß":"h","∆ï":"hv","√≠":"i","ƒ≠":"i","«ê":"i","√Æ":"i","√Ø":"i","·∏Ø":"i","·ªã":"i","»â":"i","√¨":"i","·ªâ":"i","»ã":"i","ƒ´":"i","ƒØ":"i","·∂ñ":"i","…®":"i","ƒ©":"i","·∏≠":"i","Íù∫":"d","Íùº":"f","·µπ":"g","ÍûÉ":"r","ÍûÖ":"s","Íûá":"t","Íù≠":"is","«∞":"j","ƒµ":"j"," ù":"j","…â":"j","·∏±":"k","«©":"k","ƒ∑":"k","‚±™":"k","ÍùÉ":"k","·∏≥":"k","∆ô":"k","·∏µ":"k","·∂Ñ":"k","ÍùÅ":"k","ÍùÖ":"k","ƒ∫":"l","∆ö":"l","…¨":"l","ƒæ":"l","ƒº":"l","·∏Ω":"l","»¥":"l","·∏∑":"l","·∏π":"l","‚±°":"l","Íùâ":"l","·∏ª":"l","≈Ä":"l","…´":"l","·∂Ö":"l","…≠":"l","≈Ç":"l","«â":"lj","≈ø":"s","·∫ú":"s","·∫õ":"s","·∫ù":"s","·∏ø":"m","·πÅ":"m","·πÉ":"m","…±":"m","·µØ":"m","·∂Ü":"m","≈Ñ":"n","≈à":"n","≈Ü":"n","·πã":"n","»µ":"n","·πÖ":"n","·πá":"n","«π":"n","…≤":"n","·πâ":"n","∆û":"n","·µ∞":"n","·∂á":"n","…≥":"n","√±":"n","«å":"nj","√≥":"o","≈è":"o","«í":"o","√¥":"o","·ªë":"o","·ªô":"o","·ªì":"o","·ªï":"o","·ªó":"o","√∂":"o","»´":"o","»Ø":"o","»±":"o","·ªç":"o","≈ë":"o","»ç":"o","√≤":"o","·ªè":"o","∆°":"o","·ªõ":"o","·ª£":"o","·ªù":"o","·ªü":"o","·ª°":"o","»è":"o","Íùã":"o","Íùç":"o","‚±∫":"o","≈ç":"o","·πì":"o","·πë":"o","«´":"o","«≠":"o","√∏":"o","«ø":"o","√µ":"o","·πç":"o","·πè":"o","»≠":"o","∆£":"oi","Íùè":"oo","…õ":"e","·∂ì":"e","…î":"o","·∂ó":"o","»£":"ou","·πï":"p","·πó":"p","Íùì":"p","∆•":"p","·µ±":"p","·∂à":"p","Íùï":"p","·µΩ":"p","Íùë":"p","Íùô":"q"," †":"q","…ã":"q","Íùó":"q","≈ï":"r","≈ô":"r","≈ó":"r","·πô":"r","·πõ":"r","·πù":"r","»ë":"r","…æ":"r","·µ≥":"r","»ì":"r","·πü":"r","…º":"r","·µ≤":"r","·∂â":"r","…ç":"r","…Ω":"r","‚ÜÑ":"c","Íúø":"c","…ò":"e","…ø":"r","≈õ":"s","·π•":"s","≈°":"s","·πß":"s","≈ü":"s","≈ù":"s","»ô":"s","·π°":"s","·π£":"s","·π©":"s"," Ç":"s","·µ¥":"s","·∂ä":"s","»ø":"s","…°":"g","·¥ë":"o","·¥ì":"o","·¥ù":"u","≈•":"t","≈£":"t","·π±":"t","»õ":"t","»∂":"t","·∫ó":"t","‚±¶":"t","·π´":"t","·π≠":"t","∆≠":"t","·πØ":"t","·µµ":"t","∆´":"t"," à":"t","≈ß":"t","·µ∫":"th","…ê":"a","·¥Ç":"ae","«ù":"e","·µ∑":"g","…•":"h"," Æ":"h"," Ø":"h","·¥â":"i"," û":"k","ÍûÅ":"l","…Ø":"m","…∞":"m","·¥î":"oe","…π":"r","…ª":"r","…∫":"r","‚±π":"r"," á":"t"," å":"v"," ç":"w"," é":"y","Íú©":"tz","√∫":"u","≈≠":"u","«î":"u","√ª":"u","·π∑":"u","√º":"u","«ò":"u","«ö":"u","«ú":"u","«ñ":"u","·π≥":"u","·ª•":"u","≈±":"u","»ï":"u","√π":"u","·ªß":"u","∆∞":"u","·ª©":"u","·ª±":"u","·ª´":"u","·ª≠":"u","·ªØ":"u","»ó":"u","≈´":"u","·πª":"u","≈≥":"u","·∂ô":"u","≈Ø":"u","≈©":"u","·ππ":"u","·πµ":"u","·µ´":"ue","Íù∏":"um","‚±¥":"v","Íùü":"v","·πø":"v"," ã":"v","·∂å":"v","‚±±":"v","·πΩ":"v","Íù°":"vy","·∫É":"w","≈µ":"w","·∫Ö":"w","·∫á":"w","·∫â":"w","·∫Å":"w","‚±≥":"w","·∫ò":"w","·∫ç":"x","·∫ã":"x","·∂ç":"x","√Ω":"y","≈∑":"y","√ø":"y","·∫è":"y","·ªµ":"y","·ª≥":"y","∆¥":"y","·ª∑":"y","·ªø":"y","»≥":"y","·∫ô":"y","…è":"y","·ªπ":"y","≈∫":"z","≈æ":"z","·∫ë":"z"," ë":"z","‚±¨":"z","≈º":"z","·∫ì":"z","»•":"z","·∫ï":"z","·µ∂":"z","·∂é":"z"," ê":"z","∆∂":"z","…Ä":"z","Ô¨Ä":"ff","Ô¨É":"ffi","Ô¨Ñ":"ffl","Ô¨Å":"fi","Ô¨Ç":"fl","ƒ≥":"ij","≈ì":"oe","Ô¨Ü":"st","‚Çê":"a","‚Çë":"e","·µ¢":"i","‚±º":"j","‚Çí":"o","·µ£":"r","·µ§":"u","·µ•":"v","‚Çì":"x"};
		return txt.replace(/[^A-Za-z0-9\[\] ]/g,function(a){return latin_map[a]||a});
	}

	/** 
	 *	calcOffset() is a member function to calculate the pixel offset of a list option from the top
	 *	of the list
	 *
	 *	@param ($id obj) $id is the jQuery object of the option to scroll to
	 *
	 *	@return (integer) returns the pixel offset of the option
	 */
	Listbox.prototype.calcOffset = function($id) {
		var offset = 0;
		var selectedNdx = this.$items.index($id);
		for (var ndx = 0; ndx < selectedNdx; ndx++) {
			offset += this.$items.eq(ndx).outerHeight();
		}
		return offset;

	} // end calcOffset

	/** 
	 *	handleButtonClick() is a member function to consume button click events. This handler prevents
	 *	clicks on the button from reloading the page. This could also be done by adding 'onclick="false";' to the
	 *	button HTML markup.
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean)  returns false;
	 *
	 */
	Listbox.prototype.handleButtonClick = function($id,  e) {
		e.stopPropagation();
		return false;
	} // end handleButtonClick();

	/** 
	 *	handleButtonMouseOver() is a member function to process button mouseover events
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@return (boolean)  returns false;
	 *
	 */
	Listbox.prototype.handleButtonMouseOver = function($id,  e) {
		e.stopPropagation();
		return false;
	} // end handleButtonMouseOver();

	/** 
	 *	handleButtonMouseOut() is a member function to process button mouseout events
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean)  returns false;
	 *
	 */
	Listbox.prototype.handleButtonMouseOut = function($id,  e) {
		e.stopPropagation();
		return false;
	} // end handleButtonMouseOut();

	/** 
	 *	handleButtonMouseDown() is a member function to process button mousedown events
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean)  returns false;
	 *
	 */
	Listbox.prototype.handleButtonMouseDown = function($id,  e) {
		// toggle the display of the option list
		this.toggleList(true);
		e.stopPropagation();
		return false;

	} // end handleButtonMouseDown();

	/** 
	 *	handleButtonMouseUp() is a member function to process button mouseup events
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean)  returns false;
	 *
	 */
	Listbox.prototype.handleButtonMouseUp = function($id,  e) {
		e.stopPropagation();
		return false;
	} // end handleButtonMouseUp();

	/** 
	 *	handleOptionKeyDown() is a member function to process keydown events for
	 *	the listbox
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean) Returns false if consuming; true if not processing
	 *
	 */
	Listbox.prototype.handleOptionKeyDown = function($id,  e) {
		clearTimeout (this.timer);
		var curNdx = this.$items.index($id);
		if (e.ctrlKey) {
			// do not process
			return true;
		}
		switch(e.keyCode) {
			case this.keys.tab: {
				// update and close the listbox
				if ($id.text() != this.$selected.text()) {
					// store the new selection
					this.selectOption($id);
				}
				// Close the option list
				this.closeList(false);
				// allow tab to propagate
				return true;
			}
			case this.keys.esc: {
				// Do not change listbox value
				// Close the option list
				this.closeList(true);
				e.stopPropagation();
				return false;
			}
			case this.keys.enter:
			case this.keys.space: {
				// change the listbox value
				if ($id.text() != this.$selected.text()) {
					// store the new selection
					this.selectOption($id);
				}
				// Close the option list
				this.closeList(false);
				e.stopPropagation();
				return false;
			}
			case this.keys.up: {
				if (e.altKey) {
					// alt+up toggles the list
					this.toggleList(true);
				}
				else {
					// move to the previous item in the list
					if (curNdx > 0) {
						var $prev = this.$items.eq(curNdx - 1);

						// remove the selected class from the current selection
						$id.removeClass('selected');
						$id.removeAttr('aria-selected');

						// Add the selected class to the new selection
						$prev.addClass('selected');
						$prev.attr('aria-selected', true);

						// scroll the list window to the new option
						this.$list.scrollTop(this.calcOffset($prev));

						// Set focus on the new item
						$prev.focus();
					}
				}
				e.stopPropagation();
				return false;
			}
			case this.keys.down: {
				if (e.altKey) {
					// alt+up toggles the list
					this.toggleList(true);
				}
				else {
					// move to the next item in the list
					if (curNdx < this.$items.length - 1) {
						var $next = this.$items.eq(curNdx + 1);

						// remove the selected from the current selection
						$id.removeClass('selected');
						$id.removeAttr('aria-selected');

						// Add the selected class to the new selection
						$next.addClass('selected');
						$next.attr('aria-selected', true);

						// scroll the list window to the new option
						this.$list.scrollTop(this.calcOffset($next));

						// Set focus on the new item
						$next.focus();
					}
				}
				e.stopPropagation();
				return false;
			}
			case this.keys.home: {
				// select the first list item
				var $first = this.$items.first();

				// remove the selected class from the current selection
				this.$items.eq(curNdx).removeClass('selected');
				this.$items.eq(curNdx).removeAttr('aria-selected');

				// Add the selected class to the new selection
				$first.addClass('selected');
				$first.attr('aria-selected', true);

				// scroll the list window to the new option
				this.$list.scrollTop(0);

				// set focus on the first item
				$first.focus();

				e.stopPropagation();
				return false;
			}
			case this.keys.end: {
				// select the last list item
				var $last = this.$items.last();

				// remove the selected class from the current selection
				this.$items.eq(curNdx).removeClass('selected');
				this.$items.eq(curNdx).removeAttr('aria-selected');

				// Add the selected class to the new selection
				$last.addClass('selected');
				$last.attr('aria-selected', true);

				// scroll the list window to the new option
				this.$list.scrollTop(this.calcOffset($last));

				// set focus on last item
				$last.focus();
				e.stopPropagation();
				return false;
			}
			default: {
				var self = this;
				self.timer = setTimeout (function() {
					var $found = self.searchOption(curNdx);
					if ($found != null) {
						self.selectOption($found);
						e.stopPropagation();
						return false;
					}
				}, 1000);
				var charCode = e.which >= 96 && e.which <= 105 ? e.which - 48 : e.which;
				var c = String.fromCharCode(charCode).toLocaleLowerCase();
				self.keybuff.push(c);
			}
		}
		return true;

	} // end handleOptionKeyDown()

	/** 
	 *	handleOptionKeyPress() is a member function to process keypress events for
	 *	the listbox. Needed for browsers that use keypress to manipulate the window
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean) Returns false if consuming; true if not processing
	 *
	 */
	Listbox.prototype.handleOptionKeyPress = function($id,  e) {
		var curNdx = this.$items.index($id);
		if (e.altKey || e.ctrlKey || e.shiftKey) {
			// do not process
			return true;
		}
		switch(e.keyCode) {
			case this.keys.esc:
			case this.keys.enter:
			case this.keys.space:
			case this.keys.up:
			case this.keys.down:
			case this.keys.home:
			case this.keys.end: {
				e.stopPropagation();
				return false;
			}
		}
		return true;
	} // end handleOptionKeyPress()

	/** 
	 *	handleEditKeyDown() is a member function to process keydown events for
	 *	the edit box.
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@return (boolean) Returns false if consuming; true if not processing
	 *
	 */
	Listbox.prototype.handleEditKeyDown = function($id,  e) {
		var curNdx = this.$items.index(this.$selected);
		if (e.altKey && (e.keyCode == this.keys.up || e.keyCode == this.keys.down)) {
			this.toggleList(true);
			e.stopPropagation();
			return false;
		}
		switch (e.keyCode) {
			case this.keys.backspace:
			case this.keys.del: {
				this.$edit.text(this.$selected.text());
				this.$input.attr('value', this.$selected.attr('data-value'));
				this.$input.trigger('change');
				e.stopPropagation();
				return false;
			}
			case this.keys.enter:
			case this.keys.space: {
				// toggle the option list
				this.toggleList(false);
				e.stopPropagation();
				return false;
			}
			case this.keys.up: {
				// move to the previous item in the list
				if (curNdx > 0) {
					var $prev = this.$items.eq(curNdx - 1);
					this.selectOption($prev);
				}
				e.stopPropagation();
				return false;
			}
			case this.keys.down: {
				// move to the next item in the list
				if (curNdx < this.$items.length - 1) {
					var $next = this.$items.eq(curNdx + 1);
					this.selectOption($next);
				}
				e.stopPropagation();
				return false;
			}
			default: {
				var self = this;
				self.timer = setTimeout (function() {
					var $found = self.searchOption(curNdx);
					if ($found != null) {
						self.selectOption($found);
						e.stopPropagation();
						return false;
					}
				}, 600);
				var charCode = e.which >= 96 && e.which <= 105 ? e.which - 48 : e.which;
				var c = String.fromCharCode(charCode).toLocaleLowerCase();
				self.keybuff.push(c);
			}
		}
		return true;

	} // end handleEditKeyDown()

	/** 
	 *	handleEditKeyPress() is a member function to process keypress events for
	 *	the edit box. Needed for browsers that use keypress events to manipulate the window.
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean) Returns false if consuming; true if not processing
	 *
	 */
	Listbox.prototype.handleEditKeyPress = function($id,  e) {
		var curNdx = this.$items.index($id);
		if (e.altKey && (e.keyCode == this.keys.up || e.keyCode == this.keys.down)) {
			e.stopPropagation();
			return false;
		}
		switch(e.keyCode) {
			case this.keys.esc:
			case this.keys.space:
			case this.keys.enter: {
				e.stopPropagation();
				return false;
			}
		}
		return true;

	} // end handleOptionKeyPress()

	/** 
	 *	handleOptionClick() is a member function to process click events for
	 *	the listbox.
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean) Returns false
	 *
	 */
	Listbox.prototype.handleOptionClick = function($id, e) {
		// select the clicked item
		this.selectOption($id);
		// close the list
		this.closeList(false);
		e.stopPropagation();
		return false;
	} // end handleOptionClick()

	/** 
	 *	handleListFocus() is a member function to process focus events for
	 *	the list box
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean) Returns true
	 *
	 */
	Listbox.prototype.handleListFocus = function($id,  e) {
		if (this.timer != null) {
			window.clearTimeout(this.timer);
			this.timer = null;
		}
		return true;

	} // end handleListFocus()

	/** 
	 *	handleListBlur() is a member function to process blur events for
	 *	the listbox
	 *
	 *	@param (e object) e is the event object associated with the event
	 *
	 *	@param ($id object) $id is the jQuery object for the element firing the event
	 *
	 *	@return (boolean) Returns true
	 *
	 */
	Listbox.prototype.handleListBlur = function($id,  e) {
		var self = this;
		// store the currently selected value
		this.selectOption(this.$items.filter('.selected'));
		// close the list box
		if (this.isOpen() == true) {
			this.timer = window.setTimeout(function() {
				self.closeList(false);
			}, 40);
		}
		return true;
	} // end handleListBlur()

	/** 
	 *	hideObject() is a member function to hide an element of the listbox. 
	 *
	 *	@param ($element jQuery object) the element to hide
	 *	@return N/A
	 */
	Listbox.prototype.hideObject = function($element) {
		$element.attr('aria-hidden', true);
		$element.hide();
	} // end hideObject()

	/** 
	 *	showObject() is a member function to show an element of the listbox. 
	 *
	 *	@param ($element jQuery object) the element to show
	 *	@return N/A
	 */
	Listbox.prototype.showObject = function($element) {
		$element.attr('aria-hidden', false);
		$element.show();
	} // end showObject()

	/** 
	 *	theme() is a public member function which allow change the listbox theme. 
	 *
	 *	@param (value string) the new theme
	 *	@return the listbox theme
	 */
	Listbox.prototype.theme = function(value) {
		if (value != null) {
			this.$listbox.removeClass(this.options.theme);
			this.options.theme = value;
			this.$listbox.addClass(this.options.theme);
		}
		return this.options.theme;
	} // end theme()

	/** 
	 *	size() is a public member function which allow change the listbox size. 
	 *
	 *	@param (value string) the new size
	 *	@return the listbox size
	 */
	Listbox.prototype.size = function(value) {
		if (value != null) {
			this.options.size = parseInt(value, 10);
		}
		return this.options.size;
	} // end size()


	/** 
	 *	reset() is a public member function which allow setting the list box to its initial state. 
	 *
	 *	@return the initial value
	 *
	 */
	Listbox.prototype.reset = function() {
		// If there is a selected option, remove the selected class from it
		if (this.$selected.length > 0) {
			this.$selected.removeClass('selected');
			this.$selected.removeAttr('aria-selected');
		}

		// add the selected class to the initial option
		this.$initial.addClass('selected');
		this.$initial.attr('aria-selected', true);

		// store the newly selected option
		this.$selected = this.$initial;

		// update the edit box
		this.$edit.text(this.$initial.text());
		this.$input.attr('value', this.$initial.attr('data-value'));
		return this.$initial.attr('data-value');
	} // end reset



	/** 
	 *	update() is a public member function which allow uppate the list box according the input value. 
	 *
	 *	@return the input value
	 *
	 */
	Listbox.prototype.update = function() {
		var self = this;
		// If there is a selected option, remove the selected class from it
		if (this.$selected.length > 0) {
			this.$selected.removeClass('selected');
			this.$selected.removeAttr('aria-selected');
		}

		// search the option
		var val = this.$input.val();
		this.$list.children().each(function(index) {
			if ($(this).attr('data-value') == val) {
				$(this).addClass('selected');
				$(this).attr('aria-selected', true);
				self.$selected = $(this);
				self.$edit.text($(this).text());
				return false;
			}
		});
		return val;
	} // end update


	/** 
	 *	empty() is a public member function which allow removing all items of the list box. 
	 *
	 *	@return null
	 *
	 */
	Listbox.prototype.empty = function() {
		this.$list.empty();
		this.$items = null;
		return null;
	} // end empty

	/** 
	 *	addItems() is a public member function which allow adding items to the list box. 
	 *
	 *	@param (items array of objects) the array of items to add. for one item : value = item.value, text = item.text, selected = true|false
	 *	@return null
	 *
	 */
	Listbox.prototype.addItems = function(items) {
		var self = this;
		$.each(items, function(index) {
			var $li = $('<li role="option" class="listbox-item" tabindex="-1" data-value="' + this.value + '">' + this.text + '</li>');
			if (this.selected) {
				$li.addClass('selected');
				$li.attr('aria-selected', true);
			}
			self.$list.append($li);
			$li.attr('id', 'item' + self.id + '-' + self.$list.children().length);
		});
		this.$items = this.$list.find('li.listbox-item');  // An array of jQuery objects for the listbox options
		this.selectOption(this.$items.filter('.selected'));
		this.bindOptionsHandlers();
		return null;
	} // end addItems

	/** 
	 *	setItems() is a public member function which allow setting all items to the list box. 
	 *
	 *	@param (items array of objects) the array of items to set. for one item : value = item.value, text = item.text, selected = true|false
	 *	@return null
	 *
	 */
	Listbox.prototype.setItems = function(items) {
		this.empty();
		this.addItems(items);
	} // end setItems


	/** 
	 *	showItem() is a public member function which allow showing an item of the listbox. 
	 *
	 *	@param (value string) the value attr of the item
	 *	@return null
	 *
	 */
	Listbox.prototype.showItem = function(value) {
		var self = this;
		if (value != null) {
			var $item = self.$list.find("li[data-value=" + value + "]");
			if ($item.length > 0) {
				return; // already there
			}
			$item = self.$list.data('alb.item-' + value);
			if (!$item) {
				return; // hideItem has not been used yet
			}
			var targetIndex = $item.data('alb.pos');
			var lastIndex = self.$items.length - 1;
			if (lastIndex == -1) {
				self.$list.prepend($item);
			} else {
				self.$items.each(function (i, e) {
					var opt = $(e);
					if (opt.data('alb.pos') > targetIndex) {
						opt.before($item);
						return false;
					} else if (i == lastIndex) {
						opt.after($item);
						return false;
					}
				});
			}
			self.$items = self.$list.find('li.listbox-item');
			self.selectOption(self.$items.filter('.selected'));
			self.bindOptionsHandlers();
		}
	} // end showItem

	/** 
	 *	hideItem() is a public member function which allow hiding an item of the listbox. 
	 *
	 *	@param (value string) the value attr of the item
	 *	@return null
	 *
	 */
	Listbox.prototype.hideItem = function(value) {
		var self = this;
		if (value != null) {
			var $item = self.$list.find("li[data-value=" + value + "]");
			if (!$item.length) {
				return;
			}
			if (!self.$list.data('alb.itemsModified')) {
				// remember the order
				self.$items.each(function (i, e) {
					$(e).data('alb.pos', i);
				});
				self.$list.data('alb.itemsModified', true);
			}
			if ($item.hasClass("selected") && self.$items.length > 1) {
				var curNdx = self.$items.index($item), $sel;
				if (curNdx < self.$items.length - 1) {
					$sel = this.$items.eq(curNdx + 1);
				} else {
					$sel = self.$items.first();
				}
				$item.removeClass("selected");
				$item.removeAttr('aria-selected');
				$sel.addClass("selected");
				$sel.attr('aria-selected', true);
			}
			self.$list.data('alb.item-' + value, $item.detach());
			self.$items = self.$list.find('li.listbox-item');
			self.selectOption(self.$items.filter('.selected'));
			self.bindOptionsHandlers();
		}
	} // end hideItem

	// LISTBOX PLUGIN DEFINITION
	// ==========================

	var old = $.fn.listbox

	$.fn.listbox = function (option, value) {
		if (typeof option == 'string' && $(this).length == 1) {
			var $this = $(this);
			setTimeout(function() {
				var data = $this.eq(0).data('alb.listbox');
				if (data) return data[option](value);
			}, 0);
		} else {
			return this.each(function () {
				var $this   = $(this);
				var data    = $this.data('alb.listbox');
				var options = $.extend({}, Listbox.DEFAULTS, $this.data(), typeof option == 'object' && option);
				if (!data && options.toggle && option == 'show') option = !option;
				if (!data) $this.data('alb.listbox', (data = new Listbox(this, options)));
				if (typeof option == 'string') data[option](value);
			});
		}
	}

	$.fn.listbox.Constructor = Listbox

	// LISTBOX NO CONFLICT
	// ====================

	$.fn.listbox.noConflict = function () {
		$.fn.listbox = old
		return this
	}
  
}));
